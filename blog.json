[{"model": "blog.post", "pk": 3, "fields": {"insert_date": "2016-01-08T21:32:51.554Z", "update_date": "2016-01-12T19:15:35.361Z", "title": "how to build a blog with django, this blog - part 1", "slug": "how-to-build-a-blog-with-django-part-1", "body": "<h3><span style=\"color: inherit; font-family: inherit; line-height: 1.1; font-size: 18px;\">Application</span><br></h3><p>With these series of posts we will learn how to build a blog using <a href=\"https://www.djangoproject.com/\" target=\"_blank\">Django</a>, a <a href=\"https://www.python.org/\" target=\"_blank\">Python</a> web-framework. <u style=\"font-weight: bold;\">For fun, I made this blog during made these posts.</u>&nbsp;</p><p>In the first post we are going to make virtual enviroment, make django project, add an app and finally make admin interface for our posts.</p><p><br></p><h4 style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Prerequisites</h4><p style=\"line-height: 18.1818px;\"><span style=\"line-height: 18.1818px;\">You must know how to write python code, how to use the terminal window (command prompt for Windows users), and obviously the basics of HTML &amp; CSS, Javascript and jQuery.&nbsp;</span><span style=\"line-height: 18.1818px;\">If you are not confortable with these technologies I suggest you to learn a little bit from&nbsp;<a href=\"https://www.codecademy.com/\" target=\"_blank\">codecademy</a>, a modern, interactive and free online Academy.</span></p><p style=\"line-height: 18.1818px;\">Also, we will use&nbsp;<a href=\"http://pypi.python.org/pypi/virtualenv\" target=\"_blank\">virtualenv</a>, a tool to create isolated Python environments. If you are not familiar with virtualenv you seriously should be using it for all of your python projects.&nbsp;<span style=\"line-height: 18.1818px;\">During the complete tutorial we will also use <a href=\"https://github.com/\" target=\"_blank\">github</a> as our git repository.</span></p><p style=\"line-height: 18.1818px;\"><br></p><h4>Let's go</h4><p>First of all we must create a <a href=\"http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\" target=\"_blank\">virtual environment</a> where everything gets installed, so that your main python installation is not affected.</p><pre class=\"language-bash\">virtualenv .virtualenvs/django-tiny-blog<br>source .virtualenvs/django-tiny-blog/bin/activate</pre><p><span style=\"line-height: 18.1818px;\">Now we are going to install Django and startup a new project</span><br></p><pre class=\"language-bash\">pip install django\r\ndjango-admin.py startproject django_tiny_blog\r\ncd django_tiny_blog</pre><p>Our project tree looks like the following</p><p><img src=\"/media/django-summernote/2016-01-08/25e9c7d1-2a07-404a-aaaf-297c2446e40c.png\" style=\"width: 187px;\"></p><p>Create database for django models and a super user for admin login</p><pre class=\"language-bash\">python manage.py migrate\r\npython manage.py createsuperuser</pre><pre class=\"language-bash\">python manage.py runserver</pre><p><b>Open the browser and go to <a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\">Admin</a> pages</b>. &nbsp;As you can see Django comes with complete admin app.</p><h4><br></h4><h4>Add blog app</h4><p>Let's go to create our really minimal blog app</p><pre class=\"language-bash\"><span style=\"line-height: 1.42857;\">python manage.py startapp blog</span></pre><p><span style=\"line-height: 18.1818px;\">Folder&nbsp;</span><span style=\"line-height: 18.1818px;\">blog was created. Now <span style=\"background-color: rgb(255, 0, 0);\">edit file django_tiny_blog/django_tiny_blog/settings.py and add 'blog' into INSTALLED_APPS</span></span></p><pre class=\"language-python\"><span style=\"line-height: 18.1818px;\">INSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n\r\n    <span style=\"background-color: yellow;\">'blog',</span>\r\n]<br></span></pre><p><span style=\"line-height: 18.1818px;\">We are ready to create our models and admin.</span></p><p><span style=\"line-height: 18.1818px; background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/models.py</span></p><pre class=\"language-python\">from __future__ import unicode_literals\r\n\r\nfrom django.db import models\r\nfrom django.core.urlresolvers import reverse\r\nfrom django.contrib.auth.models import User\r\n\r\nclass Post(models.Model):\r\n    insert_date = models.DateTimeField(auto_now_add=True)\r\n    update_date = models.DateTimeField(auto_now=True, db_index=True)\r\n    title = models.CharField(max_length=255)\r\n    slug = models.SlugField()\r\n    body = models.TextField(blank=True, help_text=\"The body of the Post\")\r\n    approved = models.BooleanField(default=False)\r\n    author = models.ForeignKey(User)\r\n    \r\n    class Meta:\r\n         ordering = [\"-update_date\"]  \r\n\r\n    def get_absolute_url(self):\r\n        return reverse('post', kwargs={\"slug\": self.slug})\r\n\r\n    def __unicode__(self):\r\n        return unicode(self.title)     \r\n\r\n    def was_published(self):\r\n        return self.approved\r\n    was_published.admin_order_field = 'update_date'\r\n    was_published.boolean = True\r\n    was_published.short_description = 'Published?' <br></pre><p><span style=\"line-height: 18.1818px;\"><br></span></p><p><span style=\"line-height: 18.1818px; background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/admin.py</span></p><pre class=\"language-python\"><span style=\"line-height: 18.1818px;\">from django.contrib import admin\r\n\r\nfrom .models import Post\r\n\r\nclass PostAdmin(admin.ModelAdmin):\r\n\r\n    prepopulated_fields = {\"slug\":(\"title\",)}\r\n    list_display = ('title', 'was_published', 'insert_date', 'update_date')\r\n    list_filter = ['insert_date']\r\n    search_fields = ['title']\r\n\r\nadmin.site.register(Post, PostAdmin)<br></span></pre><p><span style=\"line-height: 18.1818px;\">Updating database</span></p><pre class=\"language-bash\"><span style=\"line-height: 18.1818px;\">python manage.py makemigrations\r\npython manage.py migrate</span></pre><pre class=\"language-bash\"><span style=\"line-height: 18.1818px;\">python manage.py runserver<br></span></pre><p><span style=\"font-weight: 700; line-height: 18.1818px;\">Open the browser and go to&nbsp;<a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\">Admin</a>&nbsp;pages</span><span style=\"line-height: 18.1818px;\">. &nbsp;As you can see we already have a beautiful administration for our posts.</span></p><p><span style=\"line-height: 18.1818px;\"><br></span></p><p><img src=\"/media/django-summernote/2016-01-12/86f13ab0-19c7-4246-813e-f377119424bd.png\" style=\"width: 698px;\"><span style=\"line-height: 18.1818px;\"><br></span></p><p></p><h4><span style=\"line-height: 18.1818px; color: inherit; font-family: inherit;\">In the next post we will see how to make a Frontend!</span></h4><p><br></p>", "approved": true, "author": 1, "post_left": 1, "post_right": 1}}, {"model": "blog.post", "pk": 4, "fields": {"insert_date": "2016-01-09T14:34:32.202Z", "update_date": "2016-01-12T19:15:41.073Z", "title": "how to build a blog with django, this blog - part 2", "slug": "how-to-build-a-blog-with-django-part-2", "body": "<h4>Let's go to create the Frontend!</h4><p>First of all we need to create the views and the routing for that views. So, edit file <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/views.py</span> like the following</p><pre class=\"language-python\">from django.views.generic.detail import DetailView\r\nfrom django.views.generic.list import ListView\r\n\r\nfrom .models import Post\r\n\r\nclass PostDetailView(DetailView):\r\n\r\n    model = Post\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super(PostDetailView, self).get_context_data(**kwargs)\r\n        return context\r\n\r\nclass PostListView(ListView):\r\n\r\n    model = Post\r\n    paginate_by = 10\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super(PostListView, self).get_context_data(**kwargs)\r\n        return context        <br></pre><p>and then add the routing to file <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/urls.py</span></p><pre class=\"language-python\">from django.conf.urls import url\r\n\r\nfrom .views import PostDetailView, PostListView\r\n\r\nurlpatterns = [\r\n    url(r'^(?P&lt;slug&gt;[-\\w]+)/$', PostDetailView.as_view(), name='post-detail'),\r\n    url(r'^$', PostListView.as_view(), name='post-list'),\r\n]<br></pre><p>Now add blog routing to file <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/django_tiny_blog/urls.py</span>. The final result looks like the following</p><pre class=\"language-python\">from django.conf.urls import url, include, patterns\r\nfrom django.contrib import admin\r\nfrom django.conf import settings\r\n\r\nurlpatterns = [\r\n    url(r'^admin/', admin.site.urls),\r\n\r\n    <span style=\"background-color: yellow;\">url(r'^blog/', include('blog.urls')),</span>\r\n]<br></pre><p>What we are going to do now is to say Django where is our templates. To do that <span style=\"background-color: rgb(255, 0, 0);\">edit file django_tiny_blog/django_tiny_blog/settings.py and add&nbsp;<b>os.path.join(BASE_DIR, 'templates') </b>to&nbsp;TEMPLATES variable</span>. The final result looks like the following</p><pre class=\"language-python\">TEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [<span style=\"background-color: yellow;\">os.path.join(BASE_DIR, 'templates')</span>],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]<br></pre><p>Create templates folders and files</p><pre class=\"language-bash\">mkdir -p templates/blog\r\ntouch templates/base.html\r\ntouch templates/blog/post_detail.html\r\ntouch templates/blog/post_list.html</pre><p><span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/templates/base.html</span></p><pre class=\"language-html\">{% load i18n %}\r\n{% load static %}\r\n\r\n&lt;!DOCTYPE HTML&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n  \r\n  &lt;title&gt;Django Tiny Blog&lt;/title&gt;\r\n  &lt;link rel=\"stylesheet\" href=\"//bootswatch.com/darkly/bootstrap.css\" /&gt;\r\n\r\n  &lt;style&gt;\r\n    body &gt; .container {\r\n      padding-top: 100px;\r\n    }    \r\n  &lt;/style&gt;\r\n    \r\n&lt;/head&gt;\r\n&lt;body id=\"page-top\" data-spy=\"scroll\" data-target=\".navbar-fixed-top\"&gt;\r\n  &lt;nav class=\"navbar navbar-default navbar-fixed-top\"  role=\"navigation\"&gt;\r\n    &lt;div class=\"navbar-header\"&gt;\r\n      &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-fixed-top .navbar-collapse\"&gt;\r\n        &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\r\n        &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\r\n        &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n      &lt;a class=\"navbar-brand\" href=\"{% url 'post-list' %}\"&gt;Django Tiny Blog&lt;/a&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"navbar-collapse collapse navbar-responsive-collapse\"&gt;\r\n      &lt;ul class=\"nav navbar-nav navbar-left\" style=\"padding-left:20px;\"&gt;\r\n        &lt;li&gt;\r\n          &lt;a href=\"{% url 'admin:index' %}\"&gt;{% trans \"Admin\" %}&lt;/a&gt;\r\n        &lt;/li&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;                   \r\n  &lt;/nav&gt;\r\n\r\n  &lt;div class=\"container\"&gt;\r\n    {% block content %}\r\n        &lt;h1&gt;No content set&lt;/h1&gt;\r\n    {% endblock %}\r\n  &lt;/div&gt;\r\n\r\n  &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"&gt;&lt;/script&gt;\r\n  &lt;script type=\"text/javascript\" src=\"http://balupton.github.com/jquery-syntaxhighlighter/scripts/jquery.syntaxhighlighter.min.js\"&gt;&lt;/script&gt;\r\n  &lt;script type=\"text/javascript\"&gt;$.SyntaxHighlighter.init({});&lt;/script&gt;\r\n\r\n  &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;\r\n  &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;\r\n  &lt;!--[if lt IE 9]&gt;\r\n    &lt;script src=\"//oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;\r\n    &lt;script src=\"//oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;\r\n  &lt;![endif]--&gt;\r\n\r\n&lt;/body&gt; \r\n&lt;/html&gt;</pre><p><span style=\"line-height: 18.1818px; background-color: rgb(255, 0, 0);\">django_tiny_blog/templates/blog/post_detail.html</span></p><pre class=\"language-html\"><span style=\"line-height: 18.1818px;\">{% extends \"base.html\" %}\r\n{% load i18n %}\r\n{% load static %}\r\n\r\n{% block content %}\r\n\r\n  &lt;div class=\"panel panel-default\"&gt;\r\n      &lt;div class=\"panel-heading\"&gt;\r\n          &lt;h3 class=\"panel-title\"&gt;\r\n              {{ object.title|upper }}\r\n              &lt;span class=\"pull-right\"&gt;\r\n                  &lt;i&gt;\r\n                      &lt;small&gt;\r\n                          {{ object.insert_date }} | {{ object.author }}\r\n                      &lt;/small&gt;\r\n                  &lt;/i&gt;\r\n              &lt;/span&gt;                       \r\n          &lt;/h3&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"panel-body\"&gt;\r\n          &lt;p&gt;{{ object.body|safe }}&lt;/p&gt;  \r\n      &lt;/div&gt;\r\n  &lt;/div&gt; \r\n  \r\n{% endblock %}\r\n</span></pre><p><span style=\"line-height: 18.1818px; background-color: rgb(255, 0, 0);\">django_tiny_blog/templates/blog/post_list.html</span></p><p></p><pre class=\"language-html\">{% extends \"base.html\" %}\r\n{% load i18n %}\r\n{% load static %}\r\n\r\n{% block content %}\r\n\r\n&lt;div class=\"row\"&gt;\r\n \r\n    &lt;div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\"&gt;    \r\n\r\n        {% for post in object_list %}\r\n\r\n            &lt;div class=\"panel panel-default\"&gt;\r\n                &lt;div class=\"panel-heading\"&gt;\r\n                    &lt;h3 class=\"panel-title\"&gt;\r\n                        &lt;a href=\"{% url 'post-detail' post.slug %}\"&gt;{{ post.title|upper }}&lt;/a&gt;\r\n                        &lt;span class=\"pull-right\"&gt;\r\n                            &lt;i&gt;\r\n                                &lt;small&gt;\r\n                                    {{ post.insert_date }} | {{ post.author }}\r\n                                &lt;/small&gt;\r\n                            &lt;/i&gt;\r\n                        &lt;/span&gt;                       \r\n                    &lt;/h3&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"panel-body\"&gt;\r\n                    {{ post.body|safe|linebreaksbr|truncatewords_html:50 }}   \r\n                &lt;/div&gt;\r\n            &lt;/div&gt;  \r\n\r\n        {% endfor %}  \r\n\r\n    &lt;/div&gt; \r\n&lt;/div&gt;   \r\n{% endblock %}\r\n</pre><p></p><p><span style=\"line-height: 1.42857;\">As you can see the templates are based on powerful&nbsp;<a href=\"http://getbootstrap.com/\" target=\"_blank\">Bootstrap</a> and a fantastics&nbsp;<a href=\"https://bootswatch.com/\" target=\"_blank\">Bootswatch</a> free themes. Also for code highlighting <a href=\"https://github.com/balupton/jquery-syntaxhighlighter\" target=\"_blank\">jQuery Syntax Highlighter</a>.</span></p><pre class=\"language-bash\"><span style=\"line-height: 16.8831px;\">python manage.py runserver</span><span style=\"line-height: 1.42857;\"><br></span></pre><p><span style=\"font-weight: 700; line-height: 18.1818px;\">Open the browser and go to&nbsp;<a href=\"http://127.0.0.1:8000/blog/\" target=\"_blank\">Blog</a>&nbsp;pages</span><span style=\"line-height: 18.1818px;\">. The result is already responsive and works well on most of mobile devices.</span></p><p><br></p><p><img src=\"/media/django-summernote/2016-01-12/eb4a06e5-607e-481e-8554-00a87e357ef8.png\" style=\"width: 698px;\"><br></p><p><br></p>", "approved": true, "author": 1, "post_left": 1, "post_right": 1}}, {"model": "blog.post", "pk": 5, "fields": {"insert_date": "2016-01-09T16:09:21.789Z", "update_date": "2016-01-12T19:53:04.338Z", "title": "how to build a blog with django, this blog - part 3", "slug": "how-to-build-a-blog-with-django-part-3", "body": "<p></p><h4><span style=\"color: inherit; font-family: inherit; line-height: 1.42857;\">Add pagination to post list page</span><br></h4><h4><span style=\"line-height: 1.42857; font-size: 14px; background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/models.py</span></h4><pre class=\"language-python\"><span style=\"line-height: 16.8831px;\">...\r\n\r\nfrom django.core.paginator import Paginator\r\nfrom django.core.paginator import EmptyPage\r\nfrom django.core.paginator import PageNotAnInteger\r\n\r\n...\r\n\r\nclass PostDetailView(DetailView):\r\n\r\n    ...\r\n\r\nclass PostListView(ListView):\r\n\r\n    model = Post\r\n    <span style=\"background-color: rgb(255, 255, 0);\">paginate_by = 10</span>\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super(PostListView, self).get_context_data(**kwargs)\r\n        <span style=\"background-color: rgb(255, 255, 0);\">post_list = Post.objects.filter(approved=True)</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">paginator = Paginator(post_list, self.paginate_by)</span>\r\n\r\n        <span style=\"background-color: rgb(255, 255, 0);\">page = self.request.GET.get('page')</span>\r\n\r\n        <span style=\"background-color: rgb(255, 255, 0);\">try:</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    object_list = paginator.page(page)</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">except PageNotAnInteger:</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    object_list = paginator.page(1)</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">except EmptyPage:</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    object_list = paginator.page(paginator.num_pages)</span>\r\n\r\n        <span style=\"background-color: rgb(255, 255, 0);\">context['object_list'] = object_list</span>\r\n\r\n        return context        </span></pre><p><span style=\"line-height: 1.42857; background-color: rgb(255, 0, 0);\">django_tiny_blog/templates/blog/post_list.html</span></p><pre class=\"language-html\"><span style=\"line-height: 16.8831px;\">{% extends \"base.html\" %}\r\n{% load i18n %}\r\n{% load static %}\r\n\r\n{% block content %}\r\n\r\n&lt;div class=\"row\"&gt;\r\n \r\n    &lt;div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\"&gt;    \r\n\r\n        {% for post in object_list %}\r\n\r\n            &lt;div class=\"panel panel-default\"&gt;\r\n                &lt;div class=\"panel-heading\"&gt;\r\n                    &lt;h3 class=\"panel-title\"&gt;\r\n                        &lt;a href=\"{% url 'post-detail' post.slug %}\"&gt;{{ post.title|upper }}&lt;/a&gt;\r\n                        &lt;span class=\"pull-right\"&gt;\r\n                            &lt;i&gt;\r\n                                &lt;small&gt;\r\n                                    {{ post.insert_date }} | {{ post.author }}\r\n                                &lt;/small&gt;\r\n                            &lt;/i&gt;\r\n                        &lt;/span&gt;                       \r\n                    &lt;/h3&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"panel-body\"&gt;\r\n                    {{ post.body|safe|linebreaksbr|truncatewords_html:50 }}   \r\n                &lt;/div&gt;\r\n            &lt;/div&gt;  \r\n\r\n        {% endfor %}  \r\n     \r\n</span><font color=\"#000000\"><span style=\"line-height: 16.8831px;\">        <span style=\"background-color: rgb(255, 255, 0);\">{% if is_paginated %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">&lt;nav&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">  &lt;ul class=\"pagination\"&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% if page_obj.has_previous %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      &lt;li&gt;&lt;a href=\"?page={{ page_obj.previous_page_number }}\"&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% else %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      &lt;li class=\"disabled\"&gt;&lt;a href=\"#\"&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% endif %}</span>\r\n\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% for num in page_obj.paginator.page_range %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      {% ifequal num page_obj.number %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">        &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;{{ num }}&lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\r\n</span>        <span style=\"background-color: rgb(255, 255, 0);\">      {% else %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">        &lt;li&gt;&lt;a href=\"?page={{ num }}\"&gt;{{ num }}&lt;/a&gt;&lt;/li&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      {% endifequal %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% endfor %}</span>\r\n\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% if page_obj.has_next %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      &lt;li&gt;&lt;a href=\"?page={{ page_obj.next_page_number }}\"&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% else %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">      &lt;li class=\"disabled\"&gt;&lt;a href=\"#\"&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">    {% endif %}</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">  &lt;ul&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">&lt;/nav&gt;</span>\r\n        <span style=\"background-color: rgb(255, 255, 0);\">{% endif %}</span>\r\n</span></font><font color=\"rgba(0, 0, 0, 0)\" style=\"line-height: 16.8831px;\">\r\n</font><span style=\"line-height: 16.8831px;\">    &lt;/div&gt; \r\n&lt;/div&gt;   \r\n{% endblock %}</span></pre><p style=\"line-height: 18.1818px;\"><br></p><p style=\"line-height: 18.1818px;\"><img src=\"/media/django-summernote/2016-01-12/03a0b480-da6f-4c04-bc4f-c44555eeab8d.png\" style=\"width: 698px;\"><br></p><p style=\"line-height: 18.1818px;\"><span style=\"line-height: 1.42857;\"><br class=\"Apple-interchange-newline\"></span></p><h4><span style=\"line-height: 1.42857;\">Change post queryset</span></h4><h4><span style=\"font-size: 14px; line-height: 18.1818px; background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/models.py</span><span style=\"line-height: 1.42857;\"><br></span></h4><p></p><pre style=\"\"><span style=\"line-height: 16.8831px;\">...\r\n\r\nclass PostDetailView(DetailView):\r\n\r\n    model = Post\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super(PostDetailView, self).get_context_data(**kwargs)\r\n        return context\r\n\r\n    <span style=\"background-color: yellow;\">def get_queryset(self):</span>\r\n    <span style=\"background-color: yellow;\">    qs = super(PostDetailView, self).get_queryset()</span>\r\n    <span style=\"background-color: yellow;\">    return qs.filter(approved=True)</span>\r\n\r\nclass PostListView(ListView):\r\n\r\n    ...</span><span style=\"line-height: 1.42857;\"><br></span></pre><p style=\"line-height: 18.1818px;\"><br></p><h4 style=\"line-height: 18.1818px;\">Add WYSIWYG editor to Admin interface</h4><p style=\"line-height: 18.1818px;\">We are going to use third party packages, like&nbsp;<a href=\"https://github.com/HackerWins/summernote\" target=\"_blank\">summernote</a>&nbsp;that is a simple WYSIWYG editor and&nbsp;<a href=\"https://github.com/summernote/django-summernote\" target=\"_blank\">django-summernote</a>&nbsp;that allows you to embed Summernote into Django very handy.</p><pre class=\"language-bash\" style=\"line-height: 1.42857;\">pip install django_summernote<br></pre><p style=\"line-height: 18.1818px;\">change PostAdmin inheritance into <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/blog/admin.py</span></p><pre class=\"language-python\" style=\"line-height: 1.42857;\">from django.contrib import admin\r\n\r\n<span style=\"background-color: yellow;\">from django_summernote.admin import SummernoteModelAdmin</span>\r\n\r\nfrom .models import Post\r\n\r\nclass PostAdmin(<span style=\"background-color: yellow;\">SummernoteModelAdmin</span>):\r\n\r\n    prepopulated_fields = {\"slug\":(\"title\",)}\r\n    list_display = ('title', 'was_published', 'insert_date', 'update_date')\r\n    list_filter = ['insert_date']\r\n    search_fields = ['title']\r\n\r\nadmin.site.register(Post, PostAdmin)</pre><p style=\"line-height: 18.1818px;\"></p><p style=\"line-height: 18.1818px;\">Add routing and media files serving to <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/<span style=\"line-height: 18.1818px;\">django_tiny_blog/urls.py</span></span></p><p style=\"line-height: 18.1818px;\"></p><pre class=\"language-python\" style=\"line-height: 1.42857;\"><span style=\"line-height: 18.1818px;\">from django.conf.urls import url, include, patterns\r\nfrom django.contrib import admin\r\nfrom django.conf import settings\r\n\r\nurlpatterns = [\r\n    url(r'^admin/', admin.site.urls),\r\n\r\n    url(r'^blog/', include('blog.urls')),\r\n    <span style=\"background-color: yellow;\">url(r'^summernote/', include('django_summernote.urls')),</span>\r\n]<br></span><font face=\"Helvetica\">\r\n<span style=\"background-color: yellow;\">if settings.DEBUG:</span>\r\n<span style=\"background-color: yellow;\">    # static files (images, css, javascript, etc.)</span>\r\n<span style=\"background-color: yellow;\">    urlpatterns += patterns('',</span>\r\n<span style=\"background-color: yellow;\">        (r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {</span>\r\n<span style=\"background-color: yellow;\">        'document_root': settings.MEDIA_ROOT}))</span></font></pre><p style=\"line-height: 18.1818px;\"><span style=\"line-height: 1.42857;\">So in the <span style=\"background-color: rgb(255, 0, 0);\">django_tiny_blog/django_tiny_blog/settings.py</span> add the following lines</span></p><pre class=\"language-python\"><span style=\"line-height: 16.8831px; background-color: yellow;\">MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\nMEDIA_URL = '/media/'</span><span style=\"line-height: 1.42857; background-color: yellow;\"><br></span></pre><p style=\"line-height: 18.1818px;\"><span style=\"line-height: 1.42857;\">Updating the database and start application</span></p><p style=\"line-height: 18.1818px;\"></p><pre class=\"language-bash\" style=\"line-height: 1.42857;\"><span style=\"line-height: 16.8831px;\">python manage.py makemigrations django_summernote\r\npython manage.py migrate django_summernote\r\npython manage.py runserver</span><span style=\"line-height: 1.42857;\"><br></span></pre><p style=\"line-height: 18.1818px;\"><span style=\"font-weight: 700; line-height: 18.1818px;\">Open the browser and go to&nbsp;</span><a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\">Admin</a><span style=\"font-weight: 700; line-height: 18.1818px;\"><a href=\"http://127.0.0.1:8000/blog/\" target=\"_blank\"></a>&nbsp;pages</span><span style=\"line-height: 18.1818px;\">.</span><span style=\"line-height: 1.42857;\"><br></span></p><div><span style=\"line-height: 18.1818px;\"><br></span></div><div><img src=\"/media/django-summernote/2016-01-12/1c19ebe6-5197-4ed3-9030-79d1012f836c.png\" style=\"width: 698px;\"><span style=\"line-height: 18.1818px;\"><br></span></div><h4><span style=\"line-height: 1.42857;\"><br></span></h4><h4><span style=\"line-height: 1.42857;\">The powerfull of django-debug-toolbar</span></h4><p></p><p style=\"\"><span style=\"line-height: 18.1818px;\">It's time to do a little bit of debug and django-debug-toolbar is our friend. Just</span></p><pre style=\"language-bash\"><span style=\"line-height: 18.1818px;\">pip install django-debug-toolbar</span></pre><p style=\"\">and <span style=\"background-color: rgb(255, 0, 0);\">add 'debug_toolbar' into django_tiny_blog/django_tiny_blog/settings.py</span></p><pre style=\"language-python\">INSTALLED_APPS = [\r\n    ...\r\n    <span style=\"background-color: rgb(255, 255, 0);\">'debug_toolbar',</span>\r\n]<br></pre><pre style=\"\">python manage.py runserver</pre><p style=\"language-bash\"><br></p><p style=\"language-bash\"><img src=\"/media/django-summernote/2016-01-12/18e29dc5-483d-45bd-8885-d971f93ddc57.png\" style=\"width: 698px;\"><br></p><p></p><p></p>", "approved": true, "author": 1, "post_left": 1, "post_right": 1}}, {"model": "blog.post", "pk": 6, "fields": {"insert_date": "2016-01-12T19:11:17.510Z", "update_date": "2016-01-12T20:11:06.447Z", "title": "how to build a blog with django, this blog - part 4", "slug": "how-build-a-blog-with-django-blog-part-4", "body": "<ul><li>related posts</li><li>comments by django-disquss</li><li>other pages outside blog (about)</li><li>sitemap.xml and robots.txt</li><li>feed rss</li><li>a little bit of seo</li></ul>", "approved": true, "author": 1, "post_left": 1, "post_right": 1}}]